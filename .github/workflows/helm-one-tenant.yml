name: Install one new helm tenant

on:
  workflow_call:
    inputs:
      cluster: 
        required: false
        type: string
        default: msi-cad-vw-cluster
      name:
        required: true
        type: string
      restart:
        required: false
        type: boolean
        default: true
      productive:
        required: false
        type: string
        default: "true"
      database:
        required: false
        type: string
        default: msi-cad-vw-database
      bucket:
        required: false
        type: string
        default: msi-cad-vw-bucket   
      parking-garages-version:
        required: true
        type: string
      parking-management-version:
        required: true
        type: string
      defect-management-version:
        required: true
        type: string
      facility-management-version:
        required: true
        type: string

    secrets:
      GC_SERVICE_ACCOUNT:
        required: true
      GC_SERVICE_ACCOUNT_SECRET:
        required: true
      GC_PROJECT_ID:
        required: true
      GC_BACKEND_BUCKET:
        required: true

env:
  HELM_CHART_PATH: oci://europe-west1-docker.pkg.dev/${{ secrets.GC_PROJECT_ID  }}/helm-repo
  GOOGLE_APPLICATION_CREDENTIALS:  ${{ github.workspace }}/${{ secrets.GC_SERVICE_ACCOUNT }}.json
  SERVICE_ACCOUNT_EMAIL: ${{ secrets.GC_SERVICE_ACCOUNT }}@${{ secrets.GC_PROJECT_ID }}.iam.gserviceaccount.com
  REGION: europe-west1-c 

jobs:
  build:
    name: Install or uninstall one helm tenant
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      run: |
        echo "${{ secrets.GC_SERVICE_ACCOUNT_SECRET }}" | base64 --decode > $GOOGLE_APPLICATION_CREDENTIALS
        echo $SERVICE_ACCOUNT_EMAIL
        gcloud auth activate-service-account $SERVICE_ACCOUNT_EMAIL --key-file=$GOOGLE_APPLICATION_CREDENTIALS
        gcloud config set project ${{ secrets.GC_PROJECT_ID }}

    # Get the GKE credentials so we can deploy to the cluster
    - name: Get GKE credentials
      uses: google-github-actions/get-gke-credentials@db150f2cc60d1716e61922b832eae71d2a45938f
      with:
        cluster_name: ${{ inputs.cluster }}
        location: ${{ env.REGION }}
        project_id: ${{ secrets.GC_PROJECT_ID }}
        
    - name: Docker auth
      run: gcloud auth configure-docker europe-west1-docker.pkg.dev --quiet

    - name: Download Tenants.json from Bucket and print tenants
      run: |
        gcloud storage cp gs://${{ secrets.GC_BACKEND_BUCKET }}/tenants.json tenants.json
        tenants=$(jq -r '.[].name' tenants.json)
        for tenant in $tenants; do
          echo $tenant
        done

    - name: Install service
      if: ${{ inputs.restart == true }}
      run: |
        entry=$(jq '.[] | select(.name == "${{ inputs.name }}")' tenants.json)

        tenant=$(echo "$entry" | jq -r '.name')
        replicas=$(echo "$entry" | jq -r '.replicas')
        maxReplicas=$(echo "$entry" | jq -r '.maxReplicas')
        maxUnavailable=$(echo "$entry" | jq -r '.maxUnavailable')
        maxSurge=$(echo "$entry" | jq -r '.maxSurge')
        averageUtilization=$(echo "$entry" | jq -r '.averageUtilization')
        maxCPU=$(echo "$entry" | jq -r '.maxCPU')
        maxMemory=$(echo "$entry" | jq -r '.maxMemory')

        helm install parkspace-${{ inputs.name }} ${{ env.HELM_CHART_PATH }}/backend/helm \
          --set namespace=enterprise/${{ inputs.name }} \
          --set resources.database=${{inputs.database}} \
          --set resources.bucket=${{ inputs.bucket }} \
          --set googleProject.name=${{ secrets.GC_PROJECT_ID }} \
          --set parkingManagement.version=${{ inputs.parking-management-version }} \
          --set parkingGarages.version=${{ inputs.parking-garages-version }} \
          --set facilityManagement.version=${{ inputs.facility-management-version }} \
          --set defectManagement.version=${{ inputs.defect-management-version }} \
          --set productive=${{ inputs.productive }} \
          --set replicaCount=$replicas  \
          --set scaling.averageUtilization=$averageUtilization \
          --set scaling.maxReplicas=$maxReplicas \
          --set scaling.memoryLimit=$maxMemory \
          --set scaling.cpuLimit=$maxCPU \
          --set rollingUpdate.maxUnavailable=$maxUnavailable \
          --set rollingUpdate.maxSurge=$maxSurge

    - name: Uninstall service
      if: ${{ inputs.restart == false }}
      run: |
        helm uninstall parkspace-${{ inputs.name }}
