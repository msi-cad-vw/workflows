name: Start Application and Cluster

on:
  workflow_call:
    outputs:
      frontend-version:
        value: ${{ jobs.get-version.outputs.frontend-version }}
      parking-garages-version:
          value: ${{ jobs.get-version.outputs.parking-garages-version }}
      parking-management-version:
          value: ${{ jobs.get-version.outputs.parking-management-version }}
      facility-management-version:
          value: ${{ jobs.get-version.outputs.facility-management-version }}
      defect-management-version:
          value: ${{ jobs.get-version.outputs.defect-management-version }}
      user-tenant-management-version:
          value: ${{ jobs.get-version.outputs.user-tenant-management-version }}
    secrets:
      GC_SERVICE_ACCOUNT:
        required: true
      GC_SERVICE_ACCOUNT_SECRET:
        required: true
      GC_PROJECT_ID:
        required: true
      REACT_JS_ENV:
        required: false
        
env:
  DOCKER_IMG_PATH: europe-west1-docker.pkg.dev/${{ secrets.GC_PROJECT_ID  }}/docker-repo/
  GOOGLE_APPLICATION_CREDENTIALS:  ${{ github.workspace }}/${{ secrets.GC_SERVICE_ACCOUNT }}.json
  SERVICE_ACCOUNT_EMAIL: ${{ secrets.GC_SERVICE_ACCOUNT }}@${{ secrets.GC_PROJECT_ID }}.iam.gserviceaccount.com
  FRONTEND: frontend
  PARKING_GARAGES: parking-garages
  PARKING_MANAGEMENT: parking-management
  FACILITY_MANGEMENT: facility-management
  DEFECT_MANAGEMENT: defect-management
  USER_TENANT_MANAGEMENT: user-tenant-management

  DEFAULT_VERSION: 1.0.0

jobs:
  get-version:
    runs-on: ubuntu-latest
    outputs:
      frontend-version: ${{ steps.set-frontend.outputs.version }}
      parking-garages-version: ${{ steps.set-parking-garages.outputs.version }}
      parking-management-version: ${{ steps.set-parking-management.outputs.version }}
      facility-management-version: ${{ steps.set-facility-management.outputs.version }}
      defect-management-version: ${{ steps.set-defect-management.outputs.version }}
      user-tenant-management-version: ${{ steps.set-user-tenant-management.outputs.version }}
    steps:
      - name: Authenticate to Google Cloud
        run: |
          echo "${{ secrets.GC_SERVICE_ACCOUNT_SECRET }}" | base64 --decode > $GOOGLE_APPLICATION_CREDENTIALS
          gcloud auth activate-service-account \
            "${{ secrets.GC_SERVICE_ACCOUNT_EMAIL }}" --key-file=$GOOGLE_APPLICATION_CREDENTIALS
          gcloud config set project ${{ secrets.GC_PROJECT_ID }}
      
      - name: Docker auth
        run: gcloud auth configure-docker europe-west1-docker.pkg.dev --quiet
      
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Get current version of frontend docker file
        id: set-frontend
        run: |
          VERSION=$(gcloud container images list-tags ${{ env.DOCKER_IMG_PATH }}${{ env.FRONTEND}} | head -n 2 | grep -oP '\b(latest|\d+\.\d+\.\d+)\b')
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Get current version of docker file
        id: set-parking-garages
        run: |
          VERSION=$(gcloud container images list-tags ${{ env.DOCKER_IMG_PATH }}${{ env.PARKING_GARAGES}} | head -n 2 | grep -oP '\b(latest|\d+\.\d+\.\d+)\b')
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Get current version of parking-management docker file
        id: set-parking-management
        run: |
          VERSION=$(gcloud container images list-tags ${{ env.DOCKER_IMG_PATH }}${{ env.PARKING_MANAGEMENT}} | head -n 2 | grep -oP '\b(latest|\d+\.\d+\.\d+)\b')
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Get current version of defect-management docker file
        id: set-defect-management
        run: |
          VERSION=$(gcloud container images list-tags ${{ env.DOCKER_IMG_PATH }}${{ env.DEFECT_MANAGEMENT}} | head -n 2 | grep -oP '\b(latest|\d+\.\d+\.\d+)\b')
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
     
      - name: Get current version of facility-management docker file
        id: set-facility-management
        run: |
          VERSION=$(gcloud container images list-tags ${{ env.DOCKER_IMG_PATH }}${{ env.FACILITY_MANGEMENT}} | head -n 2 | grep -oP '\b(latest|\d+\.\d+\.\d+)\b')
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Get current version of user-tenant-management docker file
        id: set-user-tenant-management
        run: |
          VERSION=$(gcloud container images list-tags ${{ env.DOCKER_IMG_PATH }}${{ env.USER_TENANT_MANAGEMENT}} | head -n 2 | grep -oP '\b(latest|\d+\.\d+\.\d+)\b')
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
