name: Start Services with Helm
on:
  workflow_call:
    inputs:
      cluster: 
        required: false
        type: string
        default: msi-cad-vw-cluster
      database:
        required: false
        type: string
        default: msi-cad-vw-database
      bucket:
        required: false
        type: string
        default: msi-cad-vw-bucket
      frontend-version:
        required: true
        type: string
      parking-garages-version:
        required: true
        type: string
      parking-management-version:
        required: true
        type: string
      user-tenant-management-version:
        required: true
        type: string
      defect-management-version:
        required: true
        type: string
      facility-management-version:
        required: true
        type: string

    secrets:
      GC_SERVICE_ACCOUNT:
        required: true
      GC_SERVICE_ACCOUNT_SECRET:
        required: true
      GC_PROJECT_ID:
        required: true
      GC_BACKEND_BUCKET:
        required: true

env:
  HELM_CHART_PATH: oci://europe-west1-docker.pkg.dev/${{ secrets.GC_PROJECT_ID  }}/helm-repo
  GOOGLE_APPLICATION_CREDENTIALS:  ${{ github.workspace }}/${{ secrets.GC_SERVICE_ACCOUNT }}.json
  SERVICE_ACCOUNT_EMAIL: ${{ secrets.GC_SERVICE_ACCOUNT }}@${{ secrets.GC_PROJECT_ID }}.iam.gserviceaccount.com
  REGION: europe-west1-c 

jobs:
  build:
    name: Start Services
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Authenticate to Google Cloud
      run: |
        echo "${{ secrets.GC_SERVICE_ACCOUNT_SECRET }}" | base64 --decode > $GOOGLE_APPLICATION_CREDENTIALS
        echo $SERVICE_ACCOUNT_EMAIL
        gcloud auth activate-service-account $SERVICE_ACCOUNT_EMAIL --key-file=$GOOGLE_APPLICATION_CREDENTIALS
        gcloud config set project ${{ secrets.GC_PROJECT_ID }}

    # Get the GKE credentials so we can deploy to the cluster
    - name: Get GKE credentials
      uses: google-github-actions/get-gke-credentials@db150f2cc60d1716e61922b832eae71d2a45938f
      with:
        cluster_name: ${{ inputs.cluster }}
        location: ${{ env.REGION }}
        project_id: ${{ secrets.GC_PROJECT_ID }}

    - name: Download Tenants.json from Bucket and print tenants
      run: |
        gcloud storage cp gs://${{ secrets.GC_BACKEND_BUCKET }}/tenants.json tenants.json
        tenants=$(jq -r '.[].name' tenants.json)
        for tenant in $tenants; do
          echo $tenant
        done

    - name: Docker auth
      run: gcloud auth configure-docker europe-west1-docker.pkg.dev --quiet

    - name: Get version
      run: helm version

    - name: Start services with helm - Frontend and Gateway
      continue-on-error: true
      run: |
        helm install gateway ${{ env.HELM_CHART_PATH }}/infrastructure/helm --set googleProject.name=${{ secrets.GC_PROJECT_ID }}
        helm install frontend ${{ env.HELM_CHART_PATH }}/frontend/helm \
          --set googleProject.name=${{ secrets.GC_PROJECT_ID }}
          --set frontend.version=${{ inputs.frontend-version }}
      
    - name: Install Authentication
      continue-on-error: true
      run: |
        helm install authentication ${{ env.HELM_CHART_PATH }}/authentication/helm \
          --set resources.database=${{inputs.database}} \
          --set resources.bucket=${{ inputs.bucket }} \
          --set googleProject.name=${{ secrets.GC_PROJECT_ID }}
          --set userTenantManagement.version=${{ inputs.user-tenant-management-version }}

    # Deploy the Docker image to the GKE cluster
    - name: Start backend for each tenant with helm
      continue-on-error: true 
      run: |
        tenants=$(jq -r '.[].name' tenants.json)
        for tenant in $tenants; do
          helm install parkspace-$tenant ${{ env.HELM_CHART_PATH }}/backend/helm \
            --set namespace=$tenant \
            --set resources.database=${{inputs.database}} \
            --set resources.bucket=${{ inputs.bucket }} \
            --set googleProject.name=${{ secrets.GC_PROJECT_ID }} \
            --set parkingManagement.version=${{ inputs.parking-management-version }}
            --set parkingGarages.version=${{ inputs.parking-garages-version }}
            --set facilityManagement.version=${{ inputs.facility-management-version }}
            --set defectManagement.version=${{ inputs.defect-management-version }}
        done

    # Create secrets and keys
    - name: Get Key and create it for each namespace
      continue-on-error: true 
      run: |
        gcloud iam service-accounts keys create key.json --iam-account=${{ env.SERVICE_ACCOUNT_EMAIL }}
        kubectl create secret generic gcp-sa-key --from-file=key.json=key.json -n authentication

        kubectl create secret generic gcp-sa-key --from-file=key.json=key.json -n frontend
        tenants=$(jq -r '.[].name' tenants.json)
        for tenant in $tenants; do
          kubectl create secret generic gcp-sa-key --from-file=key.json=key.json -n $tenant
        done

    - name: Upgrade services
      run: |
        helm upgrade gateway ${{ env.HELM_CHART_PATH }}/infrastructure/helm --set googleProject.name=${{ secrets.GC_PROJECT_ID }}

        helm upgrade frontend ${{ env.HELM_CHART_PATH }}/frontend/helm \
          --set googleProject.name=${{ secrets.GC_PROJECT_ID }}
          --set frontend.version=${{ inputs.frontend-version }}

        helm upgrade authentication ${{ env.HELM_CHART_PATH }}/authentication/helm \
          --set resources.database=${{inputs.database}} \
          --set resources.bucket=${{ inputs.bucket }} \
          --set googleProject.name=${{ secrets.GC_PROJECT_ID }}
          --set userTenantManagement.version=${{ inputs.user-tenant-management-version }}

        tenants=$(jq -r '.[].name' tenants.json)
        for tenant in $tenants; do
          helm upgrade parkspace-$tenant ${{ env.HELM_CHART_PATH }}/backend/helm \
            --set namespace=$tenant \
            --set resources.database=${{inputs.database}} \
            --set resources.bucket=${{ inputs.bucket }} \
            --set googleProject.name=${{ secrets.GC_PROJECT_ID }} \
            --set parkingManagement.version=${{ inputs.parking-management-version }}
            --set parkingGarages.version=${{ inputs.parking-garages-version }}
            --set facilityManagement.version=${{ inputs.facility-management-version }}
            --set defectManagement.version=${{ inputs.defect-management-version }}
        done
